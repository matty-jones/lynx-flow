import argparse
import csv
import freud
import os
import signac
import matplotlib.pyplot as plt
import matplotlib.pylab as pl
import pandas as pd
import numpy as np
from scipy.signal import argrelextrema
from scipy.ndimage import gaussian_filter

"""
This module determines the first peak of each of the aggregated RDFs (as
generated by RDF_plots.py for all jobs in the workspace), by reading in the RDF
CSVs, and using signal processing to calculate the first peak.
The first peak information is saved in the appropriate
job.document['RDF_first_peak'] as [r, g(r)].
"""


def get_first_peak(project, surface_atom_type=None):
    for job in project:
        print("Detecting peaks in", job.get_id(), "RDF for atom type", surface_atom_type)
        # Skip if this is a parent job
        if ("job_type" in job.sp) and (job.sp.job_type == "parent"):
            continue
        csv_file_location = os.path.join(
            job.ws, "RDFs", "".join(["RDF_C-", surface_atom_type, "_Av.csv"])
        )
        try:
            RDF_Data = pd.read_csv(csv_file_location)
        except FileNotFoundError:
            print("No RDF data found for", job.get_id())
            print("Skipping...")
            continue
        smoothed_RDF = gaussian_filter(RDF_Data["g(r)"], 2.0)

        plt.figure()
        plt.plot(RDF_Data["r"], RDF_Data["g(r)"], c="b")
        plt.plot(RDF_Data["r"], smoothed_RDF, c="r")
        plt.xlabel("r (Ang)")
        plt.ylabel("RDF (Arb. U.)")
        figure_file = csv_file_location.replace(".csv", "_smooth.pdf")
        peaks = argrelextrema(smoothed_RDF, np.greater)
        first_two_peaks = [RDF_Data["r"].values[x] for x in peaks[0][:2]]
        if len(first_two_peaks) == 1:
            title = "Peaks @ [{:.2f}]".format(*first_two_peaks)
        else:
            title = "Peaks @ [{:.2f}, {:.2f}]".format(*first_two_peaks)
        plt.title(title)
        try:
            # Update job document with the first peak data
            first_peak = [RDF_Data["r"].values[peaks[0][0]], smoothed_RDF[peaks[0][0]]]
            job.document["".join(["RDF_first_peak_", surface_atom_type])] = first_peak
            # Update job document with the second peak data
            second_peak = [RDF_Data["r"].values[peaks[0][1]], smoothed_RDF[peaks[0][1]]]
            job.document["".join(["RDF_second_peak_", surface_atom_type])] = second_peak
        except IndexError:
            print("Only", len(peaks), "peaks found.")
            print("Check", figure_file, "for more details")
            pass
        plt.savefig(figure_file)
        plt.close()


if __name__ == "__main__":
    project = signac.get_project("../")
    surface_atom_types = []
    for stoic_dict_str, _ in project.groupby('stoichiometry'):
        surface_atom_types += list(eval(stoic_dict_str).keys())
    surface_atom_types = list(set(surface_atom_types))
    for atom_type in surface_atom_types:
        get_first_peak(project, surface_atom_type=atom_type)
